{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement);\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  useEffect(() => {\n    const fetchWeather = async () => {\n      const apiKey = \"YOUR_API_KEY\"; // Replace with your OpenWeatherMap API key\n      const city = \"Hyderabad\";\n      try {\n        const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`);\n        const data = response.data;\n        const temps = data.list.map(item => item.main.temp);\n        const times = data.list.map(item => new Date(item.dt * 1000).toLocaleString(\"en-IN\", {\n          hour: \"2-digit\",\n          day: \"numeric\",\n          weekday: \"short\"\n        }));\n        setWeatherData({\n          temps,\n          times\n        });\n      } catch (error) {\n        console.error(\"Failed to fetch weather:\", error);\n      }\n    };\n    fetchWeather();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weather App for Hyderabad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), weatherData ? /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: weatherData.times,\n        datasets: [{\n          label: \"Temperature (°C)\",\n          data: weatherData.temps,\n          borderColor: \"blue\",\n          backgroundColor: \"lightblue\",\n          tension: 0.3\n        }]\n      },\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","jsxDEV","_jsxDEV","register","App","_s","weatherData","setWeatherData","fetchWeather","apiKey","city","response","get","data","temps","list","map","item","main","temp","times","Date","dt","toLocaleString","hour","day","weekday","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","labels","datasets","label","borderColor","backgroundColor","tension","options","responsive","plugins","legend","display","_c","$RefreshReg$"],"sources":["C:/Users/hp/Downloads/weather-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n} from \"chart.js\";\n\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement);\n\nconst App = () => {\n  const [weatherData, setWeatherData] = useState(null);\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      const apiKey = \"YOUR_API_KEY\"; // Replace with your OpenWeatherMap API key\n      const city = \"Hyderabad\";\n\n      try {\n        const response = await axios.get(\n          `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`\n        );\n\n        const data = response.data;\n        const temps = data.list.map(item => item.main.temp);\n        const times = data.list.map(item =>\n          new Date(item.dt * 1000).toLocaleString(\"en-IN\", {\n            hour: \"2-digit\",\n            day: \"numeric\",\n            weekday: \"short\",\n          })\n        );\n\n        setWeatherData({ temps, times });\n      } catch (error) {\n        console.error(\"Failed to fetch weather:\", error);\n      }\n    };\n\n    fetchWeather();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h2>Weather App for Hyderabad</h2>\n      {weatherData ? (\n        <Line\n          data={{\n            labels: weatherData.times,\n            datasets: [\n              {\n                label: \"Temperature (°C)\",\n                data: weatherData.temps,\n                borderColor: \"blue\",\n                backgroundColor: \"lightblue\",\n                tension: 0.3,\n              },\n            ],\n          }}\n          options={{\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n              },\n            },\n          }}\n        />\n      ) : (\n        <p>Loading data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}