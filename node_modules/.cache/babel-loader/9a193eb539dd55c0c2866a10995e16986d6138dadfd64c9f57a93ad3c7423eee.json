{"ast":null,"code":"import React,{useState,useEffect}from'react';import WeatherChart from'./components/WeatherChart';import CurrentWeather from'./components/CurrentWeather';import SearchBar from'./components/SearchBar';import LoadingSpinner from'./components/LoadingSpinner';import ErrorMessage from'./components/ErrorMessage';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[currentWeather,setCurrentWeather]=useState(null);const[forecastData,setForecastData]=useState(null);const[historicalData,setHistoricalData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[city,setCity]=useState('Hyderabad');// Use environment variable for OpenWeatherMap API key\nconst API_KEY=process.env.REACT_APP_OPENWEATHER_API_KEY;const BASE_URL='https://api.openweathermap.org/data/2.5';// Fetch current weather\nconst fetchCurrentWeather=async cityName=>{try{const response=await fetch(\"\".concat(BASE_URL,\"/weather?q=\").concat(cityName,\"&appid=\").concat(API_KEY,\"&units=metric\"));if(!response.ok)throw new Error('Weather data not found');const data=await response.json();return data;}catch(err){throw new Error(\"Failed to fetch current weather: \".concat(err.message));}};// Fetch 5-day forecast\nconst fetchForecast=async cityName=>{try{const response=await fetch(\"\".concat(BASE_URL,\"/forecast?q=\").concat(cityName,\"&appid=\").concat(API_KEY,\"&units=metric\"));if(!response.ok)throw new Error('Forecast data not found');const data=await response.json();return data;}catch(err){throw new Error(\"Failed to fetch forecast: \".concat(err.message));}};// Generate mock historical data (since historical API requires paid plan)\nconst generateHistoricalData=currentTemp=>{const today=new Date();const historicalData=[];for(let i=7;i>=1;i--){const date=new Date(today);date.setDate(today.getDate()-i);// Generate realistic temperature variations\nconst tempVariation=(Math.random()-0.5)*10;const temp=currentTemp+tempVariation;historicalData.push({date:date.toLocaleDateString('en-IN',{month:'short',day:'numeric'}),temp:Math.round(temp*10)/10,humidity:Math.round(40+Math.random()*40),pressure:Math.round(1000+Math.random()*50)});}return historicalData;};// Fetch all weather data\nconst fetchWeatherData=async function(){let cityName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:city;setLoading(true);setError(null);try{// Fetch current weather and forecast in parallel\nconst[current,forecast]=await Promise.all([fetchCurrentWeather(cityName),fetchForecast(cityName)]);setCurrentWeather(current);setForecastData(forecast);// Generate historical data based on current temperature\nconst historical=generateHistoricalData(current&&current.main?current.main.temp:25);setHistoricalData(historical);setCity(cityName);}catch(err){setError(err.message);}finally{setLoading(false);}};// Handle city search\nconst handleCitySearch=newCity=>{if(newCity.trim()){fetchWeatherData(newCity.trim());}};// Initial data fetch\nuseEffect(()=>{fetchWeatherData();},[]);// Prepare chart data\nconst prepareChartData=()=>{if(!forecastData||!historicalData||!forecastData.list)return{forecast:null,historical:null};const forecastChartData={labels:forecastData.list.slice(0,8).map(item=>new Date(item.dt*1000).toLocaleTimeString('en-IN',{hour:'2-digit',day:'numeric',month:'short'})),datasets:[{label:'Temperature (°C)',data:forecastData.list.slice(0,8).map(item=>item.main?Math.round(item.main.temp):null),borderColor:'rgb(59, 130, 246)',backgroundColor:'rgba(59, 130, 246, 0.1)',fill:true,tension:0.4,pointBackgroundColor:'rgb(59, 130, 246)',pointBorderColor:'#fff',pointBorderWidth:2,pointRadius:5},{label:'Feels Like (°C)',data:forecastData.list.slice(0,8).map(item=>item.main?Math.round(item.main.feels_like):null),borderColor:'rgb(239, 68, 68)',backgroundColor:'rgba(239, 68, 68, 0.1)',fill:false,tension:0.4,pointBackgroundColor:'rgb(239, 68, 68)',pointBorderColor:'#fff',pointBorderWidth:2,pointRadius:4}]};const historicalChartData={labels:historicalData.map(item=>item.date),datasets:[{label:'Temperature (°C)',data:historicalData.map(item=>item.temp),backgroundColor:'rgba(34, 197, 94, 0.8)',borderColor:'rgb(34, 197, 94)',borderWidth:1},{label:'Humidity (%)',data:historicalData.map(item=>item.humidity),backgroundColor:'rgba(168, 85, 247, 0.8)',borderColor:'rgb(168, 85, 247)',borderWidth:1}]};return{forecast:forecastChartData,historical:historicalChartData};};const chartData=prepareChartData();if(loading){return/*#__PURE__*/_jsx(LoadingSpinner,{});}if(error){return/*#__PURE__*/_jsx(ErrorMessage,{error:error,onRetry:()=>fetchWeatherData()});}return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"app-title\",children:\"\\uD83C\\uDF24\\uFE0F Weather Dashboard\"}),/*#__PURE__*/_jsx(\"p\",{className:\"app-subtitle\",children:\"Current and Historical Weather Information\"})]}),/*#__PURE__*/_jsx(SearchBar,{onSearch:handleCitySearch}),currentWeather&&/*#__PURE__*/_jsx(CurrentWeather,{weatherData:currentWeather}),/*#__PURE__*/_jsxs(\"div\",{className:\"charts-grid\",children:[chartData.forecast&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-card\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"\\uD83D\\uDCC8 24-Hour Forecast\"}),/*#__PURE__*/_jsx(WeatherChart,{data:chartData.forecast,type:\"line\",title:\"Temperature Forecast\"})]}),chartData.historical&&/*#__PURE__*/_jsxs(\"div\",{className:\"chart-card\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"chart-title\",children:\"\\uD83D\\uDCCA Past 7 Days\"}),/*#__PURE__*/_jsx(WeatherChart,{data:chartData.historical,type:\"bar\",title:\"Historical Data\"})]})]}),/*#__PURE__*/_jsxs(\"footer\",{className:\"app-footer\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Weather data provided by OpenWeatherMap API\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Last updated: \",new Date().toLocaleString('en-IN')]})]})]})});};export default App;","map":{"version":3,"names":["React","useState","useEffect","WeatherChart","CurrentWeather","SearchBar","LoadingSpinner","ErrorMessage","jsx","_jsx","jsxs","_jsxs","App","currentWeather","setCurrentWeather","forecastData","setForecastData","historicalData","setHistoricalData","loading","setLoading","error","setError","city","setCity","API_KEY","process","env","REACT_APP_OPENWEATHER_API_KEY","BASE_URL","fetchCurrentWeather","cityName","response","fetch","concat","ok","Error","data","json","err","message","fetchForecast","generateHistoricalData","currentTemp","today","Date","i","date","setDate","getDate","tempVariation","Math","random","temp","push","toLocaleDateString","month","day","round","humidity","pressure","fetchWeatherData","arguments","length","undefined","current","forecast","Promise","all","historical","main","handleCitySearch","newCity","trim","prepareChartData","list","forecastChartData","labels","slice","map","item","dt","toLocaleTimeString","hour","datasets","label","borderColor","backgroundColor","fill","tension","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","feels_like","historicalChartData","borderWidth","chartData","onRetry","className","children","onSearch","weatherData","type","title","toLocaleString"],"sources":["C:/Users/hp/Downloads/weather-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport WeatherChart from './components/WeatherChart';\nimport CurrentWeather from './components/CurrentWeather';\nimport SearchBar from './components/SearchBar';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport ErrorMessage from './components/ErrorMessage';\nimport './App.css';\n\nconst App = () => {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [historicalData, setHistoricalData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [city, setCity] = useState('Hyderabad');\n\n  // Use environment variable for OpenWeatherMap API key\n  const API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\n  const BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n  // Fetch current weather\n  const fetchCurrentWeather = async (cityName) => {\n    try {\n      const response = await fetch(\n        `${BASE_URL}/weather?q=${cityName}&appid=${API_KEY}&units=metric`\n      );\n      if (!response.ok) throw new Error('Weather data not found');\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      throw new Error(`Failed to fetch current weather: ${err.message}`);\n    }\n  };\n\n  // Fetch 5-day forecast\n  const fetchForecast = async (cityName) => {\n    try {\n      const response = await fetch(\n        `${BASE_URL}/forecast?q=${cityName}&appid=${API_KEY}&units=metric`\n      );\n      if (!response.ok) throw new Error('Forecast data not found');\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      throw new Error(`Failed to fetch forecast: ${err.message}`);\n    }\n  };\n\n  // Generate mock historical data (since historical API requires paid plan)\n  const generateHistoricalData = (currentTemp) => {\n    const today = new Date();\n    const historicalData = [];\n    \n    for (let i = 7; i >= 1; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      \n      // Generate realistic temperature variations\n      const tempVariation = (Math.random() - 0.5) * 10;\n      const temp = currentTemp + tempVariation;\n      \n      historicalData.push({\n        date: date.toLocaleDateString('en-IN', { \n          month: 'short', \n          day: 'numeric' \n        }),\n        temp: Math.round(temp * 10) / 10,\n        humidity: Math.round(40 + Math.random() * 40),\n        pressure: Math.round(1000 + Math.random() * 50)\n      });\n    }\n    \n    return historicalData;\n  };\n\n  // Fetch all weather data\n  const fetchWeatherData = async (cityName = city) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Fetch current weather and forecast in parallel\n      const [current, forecast] = await Promise.all([\n        fetchCurrentWeather(cityName),\n        fetchForecast(cityName)\n      ]);\n\n      setCurrentWeather(current);\n      setForecastData(forecast);\n      \n      // Generate historical data based on current temperature\n      const historical = generateHistoricalData(current && current.main ? current.main.temp : 25);\n      setHistoricalData(historical);\n      \n      setCity(cityName);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle city search\n  const handleCitySearch = (newCity) => {\n    if (newCity.trim()) {\n      fetchWeatherData(newCity.trim());\n    }\n  };\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchWeatherData();\n  }, []);\n\n  // Prepare chart data\n  const prepareChartData = () => {\n    if (!forecastData || !historicalData || !forecastData.list) return { forecast: null, historical: null };\n\n    const forecastChartData = {\n      labels: forecastData.list.slice(0, 8).map(item => \n        new Date(item.dt * 1000).toLocaleTimeString('en-IN', {\n          hour: '2-digit',\n          day: 'numeric',\n          month: 'short'\n        })\n      ),\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: forecastData.list.slice(0, 8).map(item => item.main ? Math.round(item.main.temp) : null),\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\n          fill: true,\n          tension: 0.4,\n          pointBackgroundColor: 'rgb(59, 130, 246)',\n          pointBorderColor: '#fff',\n          pointBorderWidth: 2,\n          pointRadius: 5,\n        },\n        {\n          label: 'Feels Like (°C)',\n          data: forecastData.list.slice(0, 8).map(item => item.main ? Math.round(item.main.feels_like) : null),\n          borderColor: 'rgb(239, 68, 68)',\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\n          fill: false,\n          tension: 0.4,\n          pointBackgroundColor: 'rgb(239, 68, 68)',\n          pointBorderColor: '#fff',\n          pointBorderWidth: 2,\n          pointRadius: 4,\n        }\n      ]\n    };\n\n    const historicalChartData = {\n      labels: historicalData.map(item => item.date),\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: historicalData.map(item => item.temp),\n          backgroundColor: 'rgba(34, 197, 94, 0.8)',\n          borderColor: 'rgb(34, 197, 94)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Humidity (%)',\n          data: historicalData.map(item => item.humidity),\n          backgroundColor: 'rgba(168, 85, 247, 0.8)',\n          borderColor: 'rgb(168, 85, 247)',\n          borderWidth: 1,\n        }\n      ]\n    };\n\n    return { forecast: forecastChartData, historical: historicalChartData };\n  };\n\n  const chartData = prepareChartData();\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error) {\n    return <ErrorMessage error={error} onRetry={() => fetchWeatherData()} />;\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-container\">\n        {/* Header */}\n        <header className=\"app-header\">\n          <h1 className=\"app-title\">🌤️ Weather Dashboard</h1>\n          <p className=\"app-subtitle\">Current and Historical Weather Information</p>\n        </header>\n\n        {/* Search Bar */}\n        <SearchBar onSearch={handleCitySearch} />\n\n        {/* Current Weather Card */}\n        {currentWeather && (\n          <CurrentWeather weatherData={currentWeather} />\n        )}\n\n        {/* Charts Grid */}\n        <div className=\"charts-grid\">\n          {/* Forecast Chart */}\n          {chartData.forecast && (\n            <div className=\"chart-card\">\n              <h3 className=\"chart-title\">📈 24-Hour Forecast</h3>\n              <WeatherChart \n                data={chartData.forecast} \n                type=\"line\" \n                title=\"Temperature Forecast\"\n              />\n            </div>\n          )}\n\n          {/* Historical Chart */}\n          {chartData.historical && (\n            <div className=\"chart-card\">\n              <h3 className=\"chart-title\">📊 Past 7 Days</h3>\n              <WeatherChart \n                data={chartData.historical} \n                type=\"bar\" \n                title=\"Historical Data\"\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <footer className=\"app-footer\">\n          <p>Weather data provided by OpenWeatherMap API</p>\n          <p>Last updated: {new Date().toLocaleString('en-IN')}</p>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}